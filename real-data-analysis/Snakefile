# Snakefile

date_ranges = config["date_ranges"]

rule all:
    input: 
        expand("output/inferred/optimization_results_{ref_min}_{ref_max}_{test_min}_{test_max}.csv", zip, 
               ref_min=[d["reference"][0] for d in date_ranges], 
               ref_max=[d["reference"][1] for d in date_ranges],
               test_min=[d["test"][0] for d in date_ranges], 
               test_max=[d["test"][1] for d in date_ranges])

rule filter_England_data:
    message: "Filtering the sequences from England between September 2020 and March 2023 from all SARS-CoV-2 sequences."
    input:
        fasta="../data/aligned.fasta.zst", 
        metadata="../data/metadata.tsv.zst"
    output:
        output_path="output/aligned.min-date.2020-09-01.max-date.2023-03-31.division.England.fasta",
        output_metadata_path="output/aligned.min-date.2020-09-01.max-date.2023-03-31.division.England.metadata.tsv"
    conda: "../envs/nextstrain.yaml"
    shell:
        """
        augur filter \
            --metadata {input.metadata} \
            --sequences {input.fasta} \
            --min-date 2020-09-01 \
            --max-date 2023-03-31 \
            --query "division == 'England'" \
            --output {output.output_path} \
            --output-metadata {output.output_metadata_path}
        """

rule get_reference_sets:
    message: "Obtaining sliding windows of reference sets from the England data."
    input:
        fasta="output/aligned.min-date.2020-09-01.max-date.2023-03-31.division.England.fasta", 
        metadata="output/aligned.min-date.2020-09-01.max-date.2023-03-31.division.England.metadata.tsv"
    output:
        output_path="output/sliding_windows/ref_{ref_min}_{ref_max}.fasta",
        output_metadata_path="output/sliding_windows/ref_{ref_min}_{ref_max}.metadata.tsv"
    conda: "../envs/nextstrain.yaml"
    shell:
        """
        augur filter \
            --metadata {input.metadata} \
            --sequences {input.fasta} \
            --min-date {wildcards.ref_min} \
            --max-date {wildcards.ref_max} \
            --output {output.output_path} \
            --output-metadata {output.output_metadata_path}
        """

rule get_test_sets:
    message: "Obtaining sliding windows of test sets from the England data."
    input:
        fasta="output/aligned.min-date.2020-09-01.max-date.2023-03-31.division.England.fasta", 
        metadata="output/aligned.min-date.2020-09-01.max-date.2023-03-31.division.England.metadata.tsv"
    output:
        output_path="output/sliding_windows/test_{test_min}_{test_max}.fasta",
        output_metadata_path="output/sliding_windows/test_{test_min}_{test_max}.metadata.tsv"
    conda: "../envs/nextstrain.yaml"
    shell:
        """
        augur filter \
            --metadata {input.metadata} \
            --sequences {input.fasta} \
            --min-date {wildcards.test_min} \
            --max-date {wildcards.test_max} \
            --output {output.output_path} \
            --output-metadata {output.output_metadata_path}
        """

rule collapse_lineages:
    message: "Collapsing Pango lineages within the reference set and creating a CSV file of Pango lineages and their corresponding sequences."
    input:
        fasta="output/sliding_windows/ref_{ref_min}_{ref_max}.fasta", 
        metadata="output/sliding_windows/ref_{ref_min}_{ref_max}.metadata.tsv"
    output:
        output_path="output/sliding_windows/seq_pango_sorted_{ref_min}_{ref_max}.csv"
    shell:
        """
        python3 ../code/collapse_lineages.py --fasta {input.fasta} --metadata {input.metadata} --trim 0 --collapse_threshold 300 \
            --out {output.output_path}
        """

rule get_allele_freq:
    message: "Obtaining matrix of allele frequencies from the reference set. Allele frequencies are by position and the clustered Pango lineages."
    input:
        data="output/sliding_windows/seq_pango_sorted_{ref_min}_{ref_max}.csv"
    output:
        output_path="output/sliding_windows/allele_freq_matrix_{ref_min}_{ref_max}.csv"
    shell:
        """
        python3 ../code/get_allele_freq.py --csv {input.data} --out {output.output_path}
        """

rule run_HMM:
    message: "Running the hidden Markov model to infer the parental lineages for the simulated recombinant sequences."
    input:
        freq="output/sliding_windows/allele_freq_matrix_{ref_min}_{ref_max}.csv",
        test="output/sliding_windows/test_{test_min}_{test_max}.fasta"
    output:
        out="output/inferred/inferred_lineages_{ref_min}_{ref_max}_{test_min}_{test_max}.json",
        optim_out="output/inferred/optimization_results_{ref_min}_{ref_max}_{test_min}_{test_max}.csv"
    shell:
        """
        python3 ../code/run_HMM.py --freq {input.freq} --test {input.test} --out {output.out} --optim_out {output.optim_out}
        """

# rule analyze_sim_results:
#     message: "Analyzing simulation results."
#     input:
#         "output/inferred/inferred_lineages.json",
#         "output/inferred/optimization_results.csv",
#         "output/inferred/inferred_lineages_controls.json",
#         "output/inferred/optimization_results_controls.csv"
#     output:
#         "output/analysis/breakpoint_distances.png",
#         "output/analysis/correct_vs_hamming.png",
#         "output/analysis/first_20_true_and_inferred.png",
#     shell:
#         """
#         python3 analyze_sim_results.py
#         """